# TAGS config - this configuration serves to tagging IP addresses according to given rules
# This should be a valid JSON document, with the following exceptions:
# - Comments may be included as lines starting with '#' (optionally preceded 
#   by whitespaces).
# - There may be a comma after the last item of an object or list.
# - Top level object is added automatically (i.e. '{' and '}' are added at the
#   beginning and the end of the whole file before passing to JSON parser)

# Tags
# Structure:
#   dict{tag ID -> tag parameters}
#   Tag parameters ( obligatory parameter is labeled with (*) ):
#   - name: displayed name of tag (*)
#   - description: general description of tag
#   - tag_color: background color of tag on web (default color from css style is used if parameter not present)
#   - condition: IP is tagged if condition is met  (*)
#           Supported syntax:
#           - logical operators: or, and, not
#           - relational operators: ==, !=, <, <=, >, >=
#           - membership operators: in, not in - only for lists and sets (not for dicts!)
#           - arithmetic operators: +, -, *, /
#           - parentheses can be used in mathematical expressions
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - attributes - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#           
#           - most of the statement is evaluated same as in python
#           - mathematical expression without relational operator is evaluated as false if result is zero or as true if result is nonzero
#           - attributes without relational operator is evaluated as true if exists in record and is not None otherwise is evaluated as false
#           - string without relational operator is evaluated always as true
#           - "in" statement is evaluated same as in python and false is returned if exception is thrown during evaluation (attribute does not exist, etc.)
#   
#   - confidence: confidence (between 0 and 1) that tag is corectly placed is calculated by this mathematical expression (*)
#           Supported syntax:
#           - arithmetic operators: +, -, *, /
#           - parentheses can be used in mathematical expressions
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - attributes - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#           
#           - most of the expression is evaluated same as in python
#           - attribute (which doesn't contain number) is evaluated as 1 if exists in record and is not None otherwise is evaluated as 0 
#           - string is evaluated as 1
#   
#   - info: information specific for each tagged IP
#           Supported syntax:
#           - string - must not to be enclosed in '', or ""
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging

"tags": {
    # Tags based on notable events
    "abusive": {
        "name": "Abusive",
        "description": "Abusive events (Harrasment, Sexual, Violence) from host has been reported",
        "tag_color": "#ba0596",
        "condition": "'Abusive' in events.types or 'AbusiveSpam' in events.types or 'AbusiveHarassment' in events.types or 'AbusiveChild' in events.types or 'AbusiveSexual' in events.types or 'AbusiveViolence' in events.types",
        "confidence": "1",        
    },
    
    "malware": {
        "name": "Malware",
        "description": "Malware has been detected on host",
        "tag_color": "#42373b",
        "condition": "'Malware' in events.types or 'MalwareVirus' in events.types or 'MalwareWorm' in events.types or 'MalwareTrojan' in events.types or 'MalwareSpyware' in events.types or 'MalwareDialer' in events.types or 'MalwareRootkit' in events.types",
        "confidence": "1",        
    },
    
    "reconscanning": {
        "name": "Scanning",
        "description": "Host scans other hosts to gather information and discover weak points",
        "tag_color": "#bc0000",
        "condition": "'ReconScanning' in events.types",
        "confidence": "1",        
    },
    
    "reconsniffing": {
        "name": "Sniffing",
        "description": "Host observes and records network traffic",
        "tag_color": "#f74100",
        "condition": "'ReconSniffing' in events.types",
        "confidence": "1",        
    },
    
    "reconsocialengineering": {
        "name": "Social Engineering",
        "description": "Host gathers information from a human in not-technical way",
        "tag_color": "#ff8282",
        "condition": "'ReconSocialEngineering' in events.types",
        "confidence": "1",        
    },
    
    "reconsearching": {
        "name": "Searching",
        "description": "Host performs suspicious searches against site",
        "tag_color": "#b78340",
        "condition": "'ReconSearching' in events.types",
        "confidence": "1",        
    },
    
    "attemptexploit": {
        "name": "Exploit attempts",
        "description": "Host attempts to compromise a system by exploiting vulnerabilities",
        "tag_color": "#35991a",
        "condition": "'AttemptExploit' in events.types or 'AttemptNewSignature' in events.types",
        "confidence": "1",        
    },
    
    "attemptlogin": {
        "name": "Login attempts",
        "description": "Host performs multiple login attempts",
        "tag_color": "#d7ed49",
        "condition": "'AttemptLogin' in events.types",
        "confidence": "1",        
    },
    
    "intrusion": {
        "name": "Intrusion",
        "description": "Host performed successful compromise of a system or application",
        "tag_color": "#633c89",
        "condition": "'Intrusion' in events.types or 'IntrusionAdminCompromise' in events.types or 'Intrusion.UserCompromise' in events.types or 'AppCompromise' in events.types or 'IntrusionBotnet' in events.types",
        "confidence": "1",        
    },
    
    "availabilitydos": {
        "name": "(D)DoS attacks",
        "description": "Host performs (or is part of) (D)DoS attacks",
        "tag_color": "#617782",
        "condition": "'AvailibilityDoS' in events.types or 'AvailibilityDDoS' in events.types",
        "confidence": "1",        
    },

    "fraud": {
        "name": "Fraud Attempts",
        "description": "Host performs fraud (phishing, scams, masquerade, ...)",
        "tag_color": "#ada31a",
        "condition": "'Fraud' in events.types or 'FraudUnauthorizedUsage' in events.types or 'FraudCopyright' in events.types or 'FraudMasquerade' in events.types or 'FraudPhishing' in events.types or 'FraudScam' in events.types",
        "confidence": "1",        
    },

    # Tags primarily based on hostname
    
    "researchscanners": {
        "name": "Research Scanners",
        "description": "Host scans other host for the sake of education or research",
        "tag_color": "#5c9e00",
        "condition": "'research_scanners' in hostname_class",
        "confidence": "1",
    },
    
    "vpn": {
        "name": "VPN server",
        "description": "Host serves as VPN server",
        "tag_color": "#e2e218",
        "condition": "'vpn' in hostname_class",
        "confidence": "1",
    },
    
    "nat": {
        "name": "NAT gateway",
        "description": "Host serves as NAT gateway",
        "tag_color": "#19d6b3",
        "condition": "'nat' in hostname_class",
        "confidence": "1",
    },
    
    "dsl": {
        "name": "DSL connection",
        "description": "Host uses DSL type of connection",
        "tag_color": "#184ed6",
        "condition": "'dsl' in hostname_class",
        "confidence": "1",
    },
    
    "staticIP": {
        "name": "Static IP",
        "description": "Host uses static IP address",
        "tag_color": "#ef8204",
        "condition": "'static' in hostname_class",
        "confidence": "1",
    },
    
    "dynamicIP": {
        "name": "Dynamic IP",
        "description": "Host uses dynamic IP address",
        "tag_color": "#04efe3",
        "condition": "'dynamic' in hostname_class",
        "confidence": "1",
    },
   
    # Tags based on blacklists
     
    "tor": {
        "name": "TOR exit node",
        "description": "Host serves as TOR exit node",
        "tag_color": "#680f59",
        "condition": "bl.tor",
        "confidence": "1",
    },
    
    #"test": {
    #    "name": "Test",
    #    "description": "This is test tag",
    #    "tag_color": "#bc0000",
    #    "condition": "caida_as_class.v == 'access' and 'ReconScanning' in events.typess ",
    #    "confidence": "caida_as_class.c*0.5 + hostname*0.5",
    #    "info": "this ip with hostname {hostname} has been classified as {caida_as_class.v} type"
    #},
}

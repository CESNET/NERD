# TAGS config - this configuration serves to tagging IP addresses according to given rules
# This should be a valid JSON document, with the following exceptions:
# - Comments may be included as lines starting with '#' (optionally preceded 
#   by whitespaces).
# - There may be a comma after the last item of an object or list.
# - Top level object is added automatically (i.e. '{' and '}' are added at the
#   beginning and the end of the whole file before passing to JSON parser)

# Tags
# Structure:
#   dict{tag ID -> tag parameters}
#   Tag parameters ( obligatory parameter is labeled with (*) ):
#   - name: displayed name of tag (*)
#   - description: general description of tag
#   - tag_color: background color of tag on web (default color from css style is used if parameter not present)
#   - condition: IP is tagged if condition is evaluated as True or nonzero number or is not None  (*)
#                Condition also serves for confidence calculation - if evaluated condition is not number, condition is
#                0 if evaluated condition is False or None otherwise confidence is 1 
#           Supported syntax:
#           - logical operators: or, and, not
#           - relational operators: ==, !=, <, <=, >, >=
#           - membership operators: in, not in - only for lists and sets (not for dicts!)
#           - arithmetic operators: +, -, *, /
#           - parentheses
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - attributes - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#           
#           Evaluation:
#           - most of the statement is evaluated same as in python
#           - mathematical expression on left or right side of logical operator is evaluated as false if result is zero or as true if result is nonzero
#           - attributes on left or right side of logical operator is evaluated as true if exists in record and is not None otherwise is evaluated as false
#           - string on left or right side of logical operator is evaluated always as true
#           - logical expression on left or right side of arithmetic operator (must be closed in parentheses!) is evaluated as 1 if true otherwise 0
#           - attribute (which doesn't contain number) on left or right side of arithmetic operator is evaluated as 
#             1 if exists in record and is not None otherwise is evaluated as 0
#           - string on left or right side of arithmetic operator is evaluated as 1
#           - "in" statement is evaluated same as in python and false is returned if exception is thrown during evaluation (attribute does not exist, etc.)
#   
#   - info: information specific for each tagged IP
#           Supported syntax:
#           - string - must not to be enclosed in '', or ""
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging

"tags": {
    # Tags based on notable events
#     "abusive": {
#         "name": "Abusive",
#         "description": "Abusive events (Harrasment, Sexual, Violence) from host has been reported",
#         "tag_color": "#ba0596",
#         "condition": "'Abusive' in events.types or 'AbusiveSpam' in events.types or 'AbusiveHarassment' in events.types or 'AbusiveChild' in events.types or 'AbusiveSexual' in events.types or 'AbusiveViolence' in events.types",
#     },
    
    "malware": {
        "name": "Malware",
        "description": "Malware has been detected on host",
        "info": "Prevalent event cateogries: {events.types}",
        "tag_color": "#42373b",
        "condition": "'Malware' in events.types or 'MalwareVirus' in events.types or 'MalwareWorm' in events.types or 'MalwareTrojan' in events.types or 'MalwareSpyware' in events.types or 'MalwareDialer' in events.types or 'MalwareRootkit' in events.types",
    },
    
    "reconscanning": {
        "name": "Scanner",
        "description": "Host scans other hosts to gather information and discover weak points",
        "info": "Prevalent event categories: {events.types}",
        "tag_color": "#bc0000",
        "condition": "'ReconScanning' in events.types",
    },
    
    "attemptexploit": {
        "name": "Exploit attempts",
        "description": "Host attempts to compromise a system by exploiting vulnerabilities",
        "info": "Prevalent event categories: {events.types}",
        "tag_color": "#35991a",
        "condition": "'AttemptExploit' in events.types or 'AttemptNewSignature' in events.types",
    },
    
    "attemptlogin": {
        "name": "Login attempts",
        "description": "Host performs automated login attempts",
        "info": "Prevalent event categories: {events.types}",
        "tag_color": "#d7ed49",
        "condition": "'AttemptLogin' in events.types",
    },
    
#     "intrusion": {
#         "name": "Intrusion",
#         "description": "Host performed successful compromise of a system or application",
#         "tag_color": "#633c89",
#         "condition": "'Intrusion' in events.types or 'IntrusionAdminCompromise' in events.types or 'Intrusion.UserCompromise' in events.types or 'AppCompromise' in events.types or 'IntrusionBotnet' in events.types",
#     },
    
    "availabilitydos": {
        "name": "(D)DoS attacks",
        "description": "Host performs (or is part of) (D)DoS attacks",
        "info": "Prevalent event categories: {events.types}",
        "tag_color": "#617782",
        "condition": "'AvailibilityDoS' in events.types or 'AvailibilityDDoS' in events.types",
    },

#     "fraud": {
#         "name": "Fraud Attempts",
#         "description": "Host performs fraud (phishing, scams, masquerade, ...)",
#         "tag_color": "#ada31a",
#         "condition": "'Fraud' in events.types or 'FraudUnauthorizedUsage' in events.types or 'FraudCopyright' in events.types or 'FraudMasquerade' in events.types or 'FraudPhishing' in events.types or 'FraudScam' in events.types",
#     },

    # Tags primarily based on hostname
    
    "researchscanners": {
        "name": "Research scanner",
        "description": "Well known (legitimate) internet scanning service or project, usually for research purposes",
        "tag_color": "#5c9e00",
        "condition": "'research_scanner' in hostname_class",
    },
    
    "vpn": {
        "name": "VPN",
        "description": "Host serves as a VPN server",
        "tag_color": "#e2e218",
        "condition": "'vpn' in hostname_class",
    },
    
    "nat": {
        "name": "NAT",
        "description": "Host serves as a NAT gateway",
        "tag_color": "#19d6b3",
        "condition": "'nat' in hostname_class",
    },
    
    "dsl": {
        "name": "DSL",
        "description": "Ordinary end-user DSL connection",
        "tag_color": "#184ed6",
        "condition": "'dsl' in hostname_class",
    },
    
    "staticIP": {
        "name": "Static IP",
        "description": "Host uses static IP address",
        "tag_color": "#ef8204",
        "condition": "'static' in hostname_class",
    },
    
    "dynamicIP": {
        "name": "Dynamic IP",
        "description": "Host uses dynamic IP address",
        "tag_color": "#04efe3",
        "condition": "'dynamic' in hostname_class",
    },
   
    # Tags based on blacklists
     
    "tor": {
        "name": "TOR exit node",
        "description": "Host serves as a TOR exit node",
        "tag_color": "#680f59",
        "condition": "bl.tor",
    },
    
    #"test": {
    #    "name": "Test",
    #    "description": "This is test tag",
    #    "tag_color": "#bc0000",
    #    "condition": "caida_as_class.v == 'access' and 'ReconScanning' in events.typess ",
    #    "info": "this ip with hostname {hostname} has been classified as {caida_as_class.v} type"
    #},
}

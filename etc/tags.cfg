# TAGS config - this configuration serves to tagging IP addresses according to given rules
# This should be a valid JSON document, with the following exceptions:
# - Comments may be included as lines starting with '#' (optionally preceded 
#   by whitespaces).
# - There may be a comma after the last item of an object or list.
# - Top level object is added automatically (i.e. '{' and '}' are added at the
#   beginning and the end of the whole file before passing to JSON parser)

# Tags
# Structure:
#   dict{tag ID -> tag parameters}
#   Tag parameters ( obligatory parameter is labeled with (*) ):
#   - name: displayed name of tag (*)
#   - description: general description of tag
#   - tag_color: background color of tag on web (default color from css style is used if parameter not present)
#   - condition: IP is tagged if condition is met  (*)
#           Supported syntax:
#           - logical operators: or, and, not
#           - relational operators: ==, !=, <, <=, >, >=
#           - membership operators: in, not in
#           - arithmetic operators: +, -, *, /
#           - parentheses can be used in mathematical expressions
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid variables name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - variables - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#           
#           - most of the statement is evaluated same as in python
#           - mathematical expression without relational operator is evaluated as false if result is zero or as true if result is nonzero
#           - variable without relational operator is evaluated as true if exists in record and is not None otherwise is evaluated as false
#           - string without relational operator is evaluated always as true
#           - "in" statement is evaluated same as in python and false is returned if exception is thrown during evaluation (variable does not exist, etc.)
#   
#   - confidence: confidence (between 0 and 1) that tag is corectly placed is calculated by this mathematical expression (*)
#           Supported syntax:
#           - arithmetic operators: +, -, *, /
#           - parentheses can be used in mathematical expressions
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid variables name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - variables - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#           
#           - most of the expression is evaluated same as in python
#           - variable (which doesn't contain number) is evaluated as 1 if exists in record and is not None otherwise is evaluated as 0 
#           - string is evaluated as 1
#   
#   - info: information specific for each tagged IP
#           Supported syntax:
#           - string - must not to be enclosed in '', or ""
#               - valid variables name enclosed in {} in string will be replaced with its value valid at the time of tagging

"tags": {
    "test": {
        "name": "test",
        "description": "this is test useless tag",
        "tag_color": "#bc0000",
        "condition": "caida_as_class.v == 'access' and 'ReconScanning' in events.types ",
        "confidence": "caida_as_class.c*0.5 + hostname*0.5",
        "info": "this ip with hostname {hostname} has been classified as {caida_as_class.v} type"
    },
    "test2": {
        "name": "Non valid",
        "description": "missing condition -> should be skipped",
        "tag_color": "#ff0000",
        "confidence": "caida_as_class.c*0.5 + hostname*0.5",
        "info": "This IP with hostname {hostname} has been classified as {caida_as_class.v} type"
    },
    "test3": {
        "name": "non valid2",
        "description": "parse error in confidence -> should be skipped",
        "tag_color": "#ff0000",
        "condition": "caida_as_class.v == 'access' and 'reconscanning' in events.types ",
        "confidence": "caida_as_class.c*0.5 == 15 + hostname*0.5",
        "info": "this ip with hostname {hostname} has been classified as {caida_as_class.v} type"
    },
    "test4": {
        "name": "test tag 4",
        "description": "this is test4 useless tag",
        "tag_color": "#00af00",
        "condition": "caida_as_class.v == 'access'",
        "confidence": "caida_as_class.c",
    },
}

# Path to YAML file with Malpedia's list of malware families
# Used for malware subcategory classification
malpedia_family_list_path: "/data/malpedia/malware_families.yml"


# Threat categorization
# Structure:
#   dict{category ID -> category parameters}
#   Category parameters:
#   - role: IP role (src/dst) that will be assigned along with the main category
#   - label: Displayed name of the category
#   - description: General description of the category
#   - subcategories: List of required subcategories (port, protocol, malware_family)
#           Supported subcategories:
#           - port
#           - protocol
#           - malware_family
#
#   - triggers: List of category triggers (single string separated by newlines)
#               Divided to sections for each source module so that they do not have to evaluate unnecessary triggers
#               IP is assigned a category if a related trigger is evaluated as True
#
#           Supported syntax:
#           - triggers can have two parts separated by '->', both use standard Python syntax
#           - first part is mandatory and should resolve to either True or False
#           - second part is optional and contains a dictionary definition, which is used to specify subcategories
#
#           Evaluation:
#           - triggers are evaluated by source modules when a new event is received (except for blacklists module
#             which instead uses it as a blacklist ID for blacklist -> category mapping)
#           - IP is assigned a category if any of the related statements resolve to True
#           - if required by the category configuration, the IP is also assigned subcategories based on the second
#             part of the statement (can be empty)
#           - within each statement it is possible to access an 'event' object (instance of ClassifiableEvent),
#             which represents the event that is currently being classified.
#           - event properties:
#             - date: Date of the event (YY-MM-DD)
#             - description: Event description (string)
#             - ip_info: Additional info about the IP (string, e.g. attribute comment from MISP)
#             - categories/tags/indicator_role: List of event categories/tags/indicators that can be used for classification
#             - protocols: List of protocols used by the IP
#             - target_ports: List of target ports used by the IP

threat_categorization:
  unknown:
    role: src
    description: The IP was reported as a source of malicious/unexpected/rouge packets, but without any further specification.
    label: Unknown

  scan:
    role: src
    description: The IP address performs a common network scanning, i.e. it tries to connect to various targets to search for open ports/services.
    label: Scanning
    subcategories:
      - port
    triggers:
      general: |-
        match_str('scan', event.ip_info)
      warden_receiver: |-
        any([match_str('Recon', cat) for cat in event.categories])
      otx_receiver: |-
        match_str('scan', event.indicator_role)
        event.description == 'Webscanners 2018-02-09 thru current day'
      misp_receiver: |-
        'CERT-XLM:information-gathering="scanner"' in event.tags
        'ecsirt:information-gathering="scanner"' in event.tags
        'circl:incident-classification="scan"' in event.tags

  bruteforce:
    role: src
    description: The IP performs dictionary (or bruteforce) attacks on password-protected services. Usually accompanied with scanning - searching for the targeted service.
    label: Bruteforce
    subcategories:
      - protocol
      - port
    triggers:
      general: |-
        match_str('SSH login', (event.ip_info + event.description)) -> {'protocol': ['ssh']}
        match_str('SSH intrusion', (event.ip_info + event.description)) -> {'protocol': ['ssh']}
        match_str('SSH honeypot', (event.ip_info + event.description)) -> {'protocol': ['ssh']}
        match_str('RDP honeypot', (event.ip_info + event.description)) -> {'protocol': ['rdp']}
        match_str('Telnet login', (event.ip_info + event.description)) -> {'protocol': ['telnet']}
        match_str('Telnet honeypot', (event.ip_info + event.description)) -> {'protocol': ['telnet']}
        match_str('bruteforce', event.ip_info)
      warden_receiver: |-
        'Attempt.Login' in event.categories
        'Intrusion.UserCompromise' in event.categories
        'Intrusion.AdminCompromise' in event.categories
      otx_receiver: |-
        match_str('bruteforce', event.indicator_role)
        'VNC honeypot logs' in event.description
        'Redis honeypot logs' in event.description
        'PostgresQL honeypot logs' in event.description
      misp_receiver: |-
        'CERT-XLM:intrusion-attempts="login-attempts"' in event.tags
        'ecsirt:intrusion-attempts="brute-force"' in event.tags
      blacklists: |-
        event.description == 'blocklist_de-ssh' -> {'protocol': ['ssh']}
        event.description == 'charles_the_haleys_ssh_dico_ips' -> {'protocol': ['ssh']}
        event.description == 'charles_the_haleys_smtp_dico_ips' -> {'protocol': ['smtp']}
        event.description == 'dataplane_org_sshclient' -> {'protocol': ['ssh']}
        event.description == 'dataplane_org_sshpwauth' -> {'protocol': ['ssh']}
        event.description == 'dataplane_org_telnet_login' -> {'protocol': ['telnet']}
        event.description == 'bruteforceblocker'
        event.description == 'blocklist_de-bruteforcelogin'
        match_str('Brute force passwords using SSH', event.ip_info) -> {'protocol': ['ssh']}
        match_str('Brute force passwords using FTP', event.ip_info) -> {'protocol': ['ftp']}
        match_str('Brute force passwords to SIP', event.ip_info) -> {'protocol': ['sip']}

  ddos:
    role: src
    description: The IP has been observed as a source of volumetric (D)DoS attacks.
    label: DDoS
    triggers:
      warden_receiver: |-
        'DoS anomalies' in event.description
        'Availability.DoS' in event.categories
        'Availability.DDoS' in event.categories
      misp_receiver: |-
        'DDoS' in event.tags
        'CERT-XLM:availability="dos"' in event.tags
        'CERT-XLM:availability="ddos"' in event.tags
        'ecsirt:availability="dos"' in event.tags
        'ecsirt:availability="ddos"' in event.tags
        'circl:incident-classification="denial-of-service"' in event.tags
      blacklists: |-
        match_str('HTTP flood', event.ip_info) -> {'protocol': ['http']}
        match_str('DDoS', event.ip_info)

  ddos-amplifier:
    role: dst
    description: The IP runs a service which can be (and often is) misused as an amplifier for DDoS attacks, e.g. open DNS resolvers, NTP servers, memcached, etc.
    label: DDoS amplifier
    subcategories:
      - protocol
    triggers:
      general: |-
        match_str('Open DNS', (event.ip_info + event.description)) -> {'protocol': ['dns']}
        match_str('Open Memcached', (event.ip_info + event.description)) -> {'protocol': ['memcached']}
        match_str('Abusable NTP', (event.ip_info + event.description)) -> {'protocol': ['ntp']}
      warden_receiver: |-
        'Vulnerable.Config' in event.categories and 'dns' in event.protocols -> {'protocol': ['dns']}
        'Vulnerable.Config' in event.categories and 'ntp' in event.protocols -> {'protocol': ['ntp']}
        'Vulnerable.Config' in event.categories and 'memcached' in event.protocols -> {'protocol': ['memcached']}
        'Backscatter' in event.ip_info and 'dns' in event.protocols -> {'protocol': ['dns']}
        'Backscatter' in event.ip_info and 'ntp' in event.protocols -> {'protocol': ['ntp']}
        'Backscatter' in event.ip_info and 'memcached' in event.protocols -> {'protocol': ['memcached']}

  spam:
    role: src
    description: The IP is sending spam.
    label: Spam
    triggers:
      general: |-
        match_str('spam', event.ip_info)
      warden_receiver: |-
        'Abusive.Spam' in event.categories
      misp_receiver: |-
        'CERT-XLM:abusive-content="spam"' in event.tags
        'ecsirt:abusive-content="spam"' in event.tags
        'circl:incident-classification="spam"' in event.tags
      blacklists: |-
        event.description == 'sblam_ips'
        event.description == 'psbl'
        event.description == 'spamhaus_edrop'
        match_str('Send spam', event.ip_info)

  malware_distribution:
    role: dst
    description: The IP is used to distribute a malware, e.g. hosts an HTTP URL from which a malware is being downloaded.
    label: Malware distribution
    subcategories:
      - malware_family
    triggers:
      general: |-
        match_str('malware', event.ip_info)
        match_str('trojan', event.ip_info)
        match_str('ransomware', event.ip_info)
        match_str('payload delivery', event.ip_info)
      warden_receiver: |-
        any([match_str('Malware', cat) for cat in event.categories])
      otx_receiver: |-
        match_str('malware', event.indicator_role)
        match_str('trojan', event.indicator_role)
      misp_receiver: |-
        any([match_str('malware', tag) for tag in event.tags])
        any([match_str('ransomware', tag) for tag in event.tags])
        any([match_str('trojan', tag) for tag in event.tags])
        'circl:incident-classification="malware"' in event.tags
        'ecsirt:malicious-code="malware"' in event.tags
      blacklists: |-
        event.description == 'urlhouse_ips'

  cc:
    role: dst
    description: The IP is used as Command&Control server for a botnet/malware.
    label: Command and control
    subcategories:
      - malware_family
    triggers:
      general: |-
        match_str('command and control', event.ip_info)
        match_str('botnet cc', event.ip_info)
        match_str('c2 server', event.ip_info)
      warden_receiver: |-
        'CC' in event.ip_info
      otx_receiver: |-
        match_str('command and control', event.indicator_role)
      misp_receiver: |-
        'C2' in event.tags
        'kill-chain:Command and Control' in event.tags
        'ecsirt:malicious-code="c&c"' in event.tags
      blacklists: |-
        event.description == 'feodo'
        event.description == 'bambenek_c2'

  botnet_drone:
    role: src
    description: The IP is acting as a bot/drone of a botnet.
    label: Botnet drone
    subcategories:
      - malware_family
    triggers:
      warden_receiver: |-
        'Intrusion.Botnet' in event.categories
        'Botnet' in event.ip_info
      misp_receiver: |-
        'CERT-XLM:intrusion="botnet-member"' in event.tags
        'ecsirt:malicious-code="botnet-drone"' in event.tags
      blacklists: |-
        event.description == 'mirai_tracker_ips' -> {'malware_family': ['elf.mirai']}

  phishing_site:
    role: dst
    description: The IP is hosting a phishing website.
    label: Phishing site
    triggers:
      general: |-
        match_str('phishing', event.ip_info)
      warden_receiver: |-
        'Fraud.Phishing' in event.categories
      misp_receiver: |-
        any([match_str('phishing', tag) for tag in event.tags])
      blacklists: |-
        event.description == 'openphish'

  exploit:
    role: src
    description: The IP is attempting to exploit known vulnerabilities.
    label: Exploit
    subcategories:
      - protocol
    triggers:
      general: |-
        match_str('exploit', event.ip_info)
      warden_receiver: |-
        'Attempt.Exploit' in event.categories
      otx_receiver: |-
        'Apache honeypot logs' in event.description -> {'protocol': ['http']}
        match_str('exploit', event.indicator_role)
      misp_receiver: |-
        any([match_str('exploit', tag) for tag in event.tags])
        'CERT-XLM:intrusion-attempts="new-attack-signature"' in event.tags
        'circl:incident-classification="XSS"' in event.tags
        'circl:incident-classification="sql-injection"' in event.tags
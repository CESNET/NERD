# NERD config - common part (for both NERDd and NERDweb)
---
# Number of days to store IP address in the database since the last observed event related to the IP. It also depends
# on source of the event. Highly active means highly active IP records and long active stands for records, which are
# active for long period of time
record_life_length:
  warden: 14
  misp: 180
  highly_active: 14
  long_active: 28

# Thresholds for marking IP record as highly active or long active.
#     Highly active threshold means minimum number of events, where IP address has to occur in last 7 days.
#     Long active threshold means number of days, which IP address has to be in NERD.
record_life_threshold:
  highly_active: 1000
  long_active: 30


# Number of days to store meta-data about events in IP records
max_event_history: 90

# MongoDB settings
mongodb:
  host: localhost
  port: 27017
  dbname: nerd

# RabbitMQ settings
rabbitmq:
  host: localhost
  port: 5672
  virtual_host: /
  username: guest
  password: guest

# Number of worker processes
# WARNING: If changing number of worker processes, the following process must be followed:
# 1. stop all inputs (e.g. warden_receiver, updater)
# 2. when all queues are empty, stop all workers
# 3. restart Apache via 'systemctl reload httpd'
# 4. reconfigure queues in RabbitMQ using /nerd/scripts/rmq_reconfigure.sh
# 5. change the settings here and in supervisord config (workers.ini)
# 6. reload supervisord and start everything again
worker_processes: 2

# Tag configuration file
tags_config: tags.yml

# Blacklists configuration file
bl_config: blacklists.yml

# EventDB type (where to store/read events), may be one of:
#  'psql' - (default) Local PostgreSQL database (needs config in 'eventdb_psql' in nerdd.yml)
#  'mentat' - External Mentat instance (no storage by NERD, load via Mentat API) (needs config in 'eventdb_mentat')
#  'none' - Only process events into metadata, do not store them anywhere
eventdb: psql

# eventdb: mentat

# eventdb_mentat:
#   url: https://example.com/mentat/
#   api_key: asdf1234

# Path to a directory where Warden filer stores incoming IDEA messages
warden_filer_path: "/data/warden_filer/warden_receiver"

# MISP instance settings
#misp:
  # URL of MISP instance
  #url: "https://misp.example.org"
  # The MISP auth key can be found on the MISP web interface under the automation section
  #key: ""
  # URL of MISP instace ZMQ module (tcp://MISP_URL:50000)
  #zmq: "tcp://misp.example.org:50000"

# API key for Shodan requester
shodan_api_key: ""

# File to log total number of updates processed (written every 2s)
upd_cnt_file: "/data/nerd_updates_processed"

dnsbl:
  # List of blacklists to query (the rest of "dnsbl" config is in nerdd.yml)
  blacklists:
  # blacklist_name, zone, dict{response -> blacklist_id}
  # Note: blacklist_id mustn't contain '.'
  # Spamhaus, description: https://www.spamhaus.org/faq/section/DNSBL%20Usage#200
  - - Spamhaus
    - zen.spamhaus.org
      # Spamhaus block list
    - 127.0.0.2: spamhaus-sbl
      # Spamhaus block list (CSS component)
      127.0.0.3: spamhaus-sbl-css
      # Exploit block list (data from CBL)
      127.0.0.4: spamhaus-xbl-cbl
      # DROP/EDROP
      127.0.0.9: spamhaus-drop
      # Policy block list (ISP maintained)
      127.0.0.10: spamhaus-pbl-isp
      # Policy block list (Spamhaus maintained)
      127.0.0.11: spamhaus-pbl
  # SORBS, description: http://www.sorbs.net/general/using.shtml
  - - SORBS
    - dnsbl.sorbs.net
    - 127.0.0.2: sorbs-http
      127.0.0.3: sorbs-socks
      127.0.0.4: sorbs-misc
      127.0.0.5: sorbs-smtp
      127.0.0.6: sorbs-spam
      127.0.0.7: sorbs-web
      127.0.0.8: sorbs-block
      127.0.0.9: sorbs-zombie
      127.0.0.10: sorbs-dul
      #127.0.0.11: sorbs-badconf
      #127.0.0.12: sorbs-nomail
      127.0.0.14: sorbs-noserver
  # WPBL (Weighted Private Block List; spam blacklist), description: http://www.wpbl.info/
  - - WPBL (spam)
    - db.wpbl.info
    - 127.0.0.2: wpbl
  # SpamCop, description: https://www.spamcop.net/bl.shtml
  - - SpamCop
    - bl.spamcop.net
    - 127.0.0.2: spamcop

hostname_tagging:
  known_domains:
    - [shodan.io, research_scanner]
    - [sfj.corp.censys.io, research_scanner]
    - [security.ipip.net, research_scanner]
    - [shadowserver.org, research_scanner]
    - [myvzw.com, mobile_isp]
    - [comcast.net, isp]
    - [ertelecom.ru, isp]
    - [gvt.net.br, isp]
    - [t-ipconnect.de, mobile_isp]
    - [rr.com, isp]
    - [ttnet.com.tr, isp]
    - [sbcglobal.net, isp]
    - [virtua.com.br, mobile_isp]
    - [telecomitalia.it, isp]
    - [tpnet.pl, isp]
    - [prod-infinitum.com.mx, isp]
    - [corbina.ru, isp]
    - [wanadoo.fr, isp]
    - [mycingular.net, mobile_isp]
    - [veloxzone.com.br, mobile_isp]
    - [telecom.kz, isp]
    - [charter.com, isp]
    - [verizon.net, isp]
    - [rdsnet.ro, isp]
    - [spcsdns.net, isp]
    - [rima-tde.net, isp]
    - [InterCable.net, isp]
    - [cox.net, isp]
    - [qwest.net, isp]
  regex_tagging:
    - ["\\bvpn\\b", vpn]
    - ["\\bnat\\b", nat]
    - ["\\bftp\\b", ftp]
    - ["\\bbroad(band)?\\b", dsl]
    - ["\\b[avx]?dsl\\b", dsl]
    - ["\\bdyn(amic)?\\b", dynamic]
    - ["\\bstatic\\b", static]
    # classic ip address - all parts of it must be included in correct order
    - ["^.*?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).*$", ip_in_hostname]
    # partial ip address
    - ["^(?=(?:.*(?:ip|host))).*?(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[^0-9]+)?.*$", ip_in_hostname]


# TAGS config - this configuration serves to tagging IP addresses according to given rules
# This should be a valid JSON document, with the following exceptions:
# - Comments may be included as lines starting with '#' (optionally preceded
#   by whitespaces).
# - There may be a comma after the last item of an object or list.
# - Top level object is added automatically (i.e. '{' and '}' are added at the
#   beginning and the end of the whole file before passing to JSON parser)

# Tags
# Structure:
#   dict{tag ID -> tag parameters}
#   Tag parameters ( obligatory parameter is labeled with (*) ):
#   - name: displayed name of tag (*)
#   - description: general description of tag
#   - tag_color: background color of tag on web (default color from css style is used if parameter not present)
#   - condition: IP is tagged if condition is evaluated as True or nonzero number or is not None  (*)
#                Condition also serves for confidence calculation - if evaluated condition is not number, condition is
#                0 if evaluated condition is False or None otherwise confidence is 1
#           Supported syntax:
#           - logical operators: or, and, not
#           - relational operators: ==, !=, <, <=, >, >=
#           - membership operators: in, not in - only for lists and sets (not for dicts!)
#           - arithmetic operators: +, -, *, /
#           - parentheses
#           - string - has to be enclosed in '', or "" ('' is preferred)
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging
#           - number - integer, floats (.NUM is evaluated as 0.NUM - for example .2 is 0.2)
#           - attributes - uses dot notation for dicts (test.test2.test3 is equal test["test2"]["test3"] in python)
#
#           Evaluation:
#           - most of the statement is evaluated same as in python
#           - mathematical expression on left or right side of logical operator is evaluated as false if result is zero or as true if result is nonzero
#           - attributes on left or right side of logical operator is evaluated as true if exists in record and is not None otherwise is evaluated as false
#           - string on left or right side of logical operator is evaluated always as true
#           - logical expression on left or right side of arithmetic operator (must be closed in parentheses!) is evaluated as 1 if true otherwise 0
#           - attribute (which doesn't contain number) on left or right side of arithmetic operator is evaluated as
#             1 if exists in record and is not None otherwise is evaluated as 0
#           - string on left or right side of arithmetic operator is evaluated as 1
#           - "in" statement is evaluated same as in python and false is returned if exception is thrown during evaluation (attribute does not exist, etc.)
#
#   - info: information specific for each tagged IP
#           Supported syntax:
#           - string - must not to be enclosed in '', or ""
#               - valid attributes name enclosed in {} in string will be replaced with its value valid at the time of tagging

---
tags:
#  abusive:
#    name: Abusive
#    description: Abusive events (Harrasment, Sexual, Violence) from host has been reported
#    tag_color: "#ba0596"
#    condition: "'Abusive' in events_meta.types or 'AbusiveSpam' in events_meta.types or 'AbusiveHarassment' in events_meta.types or 'AbusiveChild' in events_meta.types or 'AbusiveSexual' in events_meta.types or 'AbusiveViolence' in events_meta.types"
  malware:
    name: Malware
    description: Malware has been detected on host
    info: 'Prevalent event categories: {events_meta.types}'
    tag_color: "#933744"
    condition: "'Malware' in events_meta.types or 'MalwareVirus' in events_meta.types or 'MalwareWorm'
      in events_meta.types or 'MalwareTrojan' in events_meta.types or 'MalwareSpyware' in events_meta.types
      or 'MalwareDialer' in events_meta.types or 'MalwareRootkit' in events_meta.types"
  reconscanning:
    name: Scanner
    description: Host scans other hosts to gather information and discover weak points
    info: 'Prevalent event categories: {events_meta.types}'
    tag_color: "#aaffff"
    condition: "'ReconScanning' in events_meta.types"
  attemptexploit:
    name: Exploit attempts
    description: Host attempts to compromise a system by exploiting vulnerabilities
    info: 'Prevalent event categories: {events_meta.types}'
    tag_color: "#A1C83D"
    condition: "'AttemptExploit' in events_meta.types or 'AttemptNewSignature' in events_meta.types"
  attemptlogin:
    name: Login attempts
    description: Host performs automated login attempts
    info: 'Prevalent event categories: {events_meta.types}'
    tag_color: "#6fd92e"
    condition: "'AttemptLogin' in events_meta.types"
#  intrusion:
#    name: Intrusion
#    description: Host performed successful compromise of a system or application
#    tag_color: "#633c89"
#    condition: "'Intrusion' in events_meta.types or 'IntrusionAdminCompromise' in events_meta.types or 'Intrusion.UserCompromise' in events_meta.types or 'AppCompromise' in events_meta.types or 'IntrusionBotnet' in events_meta.types"
  availabilitydos:
    name: "(D)DoS attacks"
    description: Host performs (or is part of) (D)DoS attacks
    info: 'Prevalent event categories: {events_meta.types}'
    tag_color: "#a90000"
    condition: "'AvailabilityDoS' in events_meta.types or 'AvailabilityDDoS' in events_meta.types"
#  fraud:
#    name: Fraud Attempts
#    description: Host performs fraud (phishing, scams, masquerade, ...)
#    tag_color: "#ada31a"
#    condition: "'Fraud' in events_meta.types or 'FraudUnauthorizedUsage' in events_meta.types or 'FraudCopyright' in events_meta.types or 'FraudMasquerade' in events_meta.types or 'FraudPhishing' in events_meta.types or 'FraudScam' in events_meta.types"

  # Tags primarily based on hostname

  researchscanners:
    name: Research scanner
    description: Well known (legitimate) internet scanning service or project, usually
      for research purposes
    tag_color: "#ffffff"
    condition: "'research_scanner' in hostname_class"
  vpn:
    name: VPN
    description: Host serves as a VPN server
    tag_color: "#e6a74d"
    condition: 0.95*('vpn' in hostname_class)
  nat:
    name: NAT
    description: Host serves as a NAT gateway
    tag_color: "#11803b"
    condition: 0.95*('nat' in hostname_class)
  dsl:
    name: DSL
    description: Ordinary end-user DSL connection
    tag_color: "#426fbd"
    condition: 1 - (1 - 0.75*('dsl' in hostname_class)) * (1 - 0.5*(caida_as_class
      == 'access'))
  staticIP:
    name: Static IP
    description: Host uses static IP address
    tag_color: "#8267b2"
    condition: 0.9*('static' in hostname_class)
  dynamicIP:
    name: Dynamic IP
    description: Host uses dynamic IP address
    tag_color: "#04efe3"
    # dynamic -> 0.9
    # dsl -> 0.0
    # dynamic + dsl -> 0.95
    condition: "('dynamic' in hostname_class)*0.9 + ('dsl' in hostname_class and 'dynamic'
      in hostname_class)*0.05"
  ip_in_hostname:
    name: IP in hostname
    description: The hostname includes partial or whole IP adress
    tag_color: "#68b267"
    condition: ('ip_in_hostname' in hostname_class)

  # Tags based on blacklists

  tor:
    name: TOR exit node
    description: Host serves as a TOR exit node
    tag_color: "#333333"
    condition: bl.tor

  spam:
    name: SPAM sender
    description: Host sends spams
    tag_color: "#47669b"
    condition: bl.psbl*0.14 + bl.spamcop*0.14 + bl.blocklist_de-trigger-spam*0.14 + bl.sorbs-spam*0.14 + bl.spamhaus-sbl*0.14 + bl.uceprotect*0.15 + bl.wpbl*0.15

#  test:
#    name: Test
#    description: This is test tag
#    tag_color: "#bc0000"
#    condition: "caida_as_class.v == 'access' and 'ReconScanning' in events_meta.types "
#    confidence: "caida_as_class.c*0.5 + hostname*0.5"
#    info: "this ip with hostname {hostname} has been classified as {caida_as_class.v} type"

  reserved_ip:
    name: Reserved IP
    description: "Host IP is reserved IP address"
    tag_color: "#C0C0C0"
    condition: "reserved_range"

  dshield:
    name: DShield
    description: "IP is in DShield database"
    tag_color: "#25671F"
    condition: "dshield"

  misp_tlp_white:
    name: MISP (tlp:white)
    description: "IP is in MISP event(s) (with TLP white)"
    tag_color: "#2FA1DB"
    condition: "'white' in `$.misp_events[*].tlp`"

  misp_tlp_green:
    name: MISP (tlp:green)
    description: "IP is in MISP event(s) (with TLP green)"
    tag_color: "#2FA1DB"
    condition: "'green' in `$.misp_events[*].tlp`"

  whitelist:
    name: Whitelisted
    description: "IP is manually whitelisted"
    tag_color: "#FFFFFF"
    condition: "'research_scanner' in hostname_class or _id == '8.8.8.8' or _id == '8.8.4.4' or _id == '1.1.1.1'"
